<?php

namespace {{ namespace }}\FieldType\Test;

{% block use_statements %}
use eZ\Publish\Core\FieldType\FieldType;
use eZ\Publish\Core\FieldType\ValidationError;
use eZ\Publish\API\Repository\Values\ContentType\FieldDefinition;
use eZ\Publish\SPI\FieldType\Value as SPIValue;
use eZ\Publish\Core\FieldType\Value as BaseValue;
{% endblock use_statements %}

{% block class_definition %}
class Type extends FieldType
{% endblock class_definition %}
{
{% block class_body %}
    protected $validatorConfigurationSchema = array(
        '{{ fieldtype_basename }}ValueValidator' => array(),
    );

    public function validateValidatorConfiguration($validatorConfiguration)
    {
        $validationErrors = array();

        foreach ($validatorConfiguration as $validatorIdentifier => $constraints) {
            if ($validatorIdentifier !== '{{ fieldtype_basename }}ValueValidator') {
                $validationErrors[] = new ValidationError(
                    "Validator '%validator%' is unknown",
                    null,
                    array(
                        '%validator%' => $validatorIdentifier,
                    ),
                    "[$validatorIdentifier]"
                );

                continue;
            }

            foreach ($constraints as $name => $value) {
                switch ($name) {
                    default:
                        $validationErrors[] = new ValidationError(
                            "Validator parameter '%parameter%' is unknown",
                            null,
                            array(
                                '%parameter%' => $name,
                            ),
                            "[$validatorIdentifier][$name]"
                        );
                }
            }
        }

        return $validationErrors;
    }

    public function validate(FieldDefinition $fieldDefinition, SPIValue $fieldValue)
    {
        $validationErrors = array();

        if ($this->isEmptyValue($fieldValue)) {
            return $validationErrors;
        }

        $validatorConfiguration = $fieldDefinition->getValidatorConfiguration();
        $constraints = isset($validatorConfiguration['{{ fieldtype_basename }}ValueValidator']) ?
            $validatorConfiguration['{{ fieldtype_basename }}ValueValidator'] :
            array();

        $validationErrors = array();

        return $validationErrors;
    }

    public function getFieldTypeIdentifier()
    {
        return 'ez{{ fieldtype_identifier }}';
    }

    public function getName(SPIValue $value)
    {
        return (string)$value->value;
    }

    public function getEmptyValue()
    {
        return new Value();
    }

    public function isEmptyValue(SPIValue $value)
    {
        return $value->value === null;
    }

    protected function createValueFromInput($inputValue)
    {
        $inputValue = new Value($inputValue);

        return $inputValue;
    }

    protected function checkValueStructure(BaseValue $value)
    {
    }

    protected function getSortInfo(BaseValue $value)
    {
        return $value->value;
    }

    public function fromHash($hash)
    {
        if ($hash === null) {
            return $this->getEmptyValue();
        }

        return new Value($hash);
    }

    public function toHash(SPIValue $value)
    {
        if ($this->isEmptyValue($value)) {
            return null;
        }

        return $value->value;
    }

    public function isSearchable()
    {
        return true;
    }
{% endblock class_body %}
}
